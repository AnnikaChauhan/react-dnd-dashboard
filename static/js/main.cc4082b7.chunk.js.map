{"version":3,"sources":["styles.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","createStyles","container","border","borderRadius","overflow","ReactGridLayout","WidthProvider","RGL","App","classes","useState","draggable","setDraggable","resizable","setResizable","compactType","setCompactType","style","margin","Switch","checked","onChange","event","target","color","name","inputProps","FormControl","component","FormLabel","RadioGroup","aria-label","value","FormControlLabel","control","Radio","label","Paper","height","layout","i","x","y","w","h","minW","maxW","cols","rowHeight","width","containerPadding","className","isDraggable","isResizable","resizeHandles","resizeHandle","Card","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc4082b7.chunk.js","sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      border: \"1px solid #E9E9E9\",\n      borderRadius: \"6px\",\n      overflow: \"hidden\",\n    },\n  })\n);\n\nexport default useStyles;\n","import React, { useState } from \"react\";\nimport {\n  Card,\n  Switch,\n  Paper,\n  Radio,\n  RadioGroup,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n} from \"@material-ui/core\";\nimport useStyles from \"./styles\";\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport AspectRatioIcon from \"@material-ui/icons/AspectRatio\";\n\nconst ReactGridLayout = WidthProvider(RGL);\n\nconst App = () => {\n  const classes = useStyles();\n  const [draggable, setDraggable] = useState(true);\n  const [resizable, setResizable] = useState(true);\n  const [compactType, setCompactType] = useState(\"vertical\");\n\n  const layout = [\n    { i: \"a\", x: 0, y: 0, w: 1, h: 2 },\n    { i: \"b\", x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4 },\n    { i: \"c\", x: 4, y: 0, w: 1, h: 2 },\n    { i: \"d\", x: 1, y: 1, w: 2, h: 3 },\n    { i: \"e\", x: 2, y: 1, w: 2, h: 2 },\n  ];\n\n  const handleDraggableChange = (event) => setDraggable(event.target.checked);\n\n  const handleResizableChange = (event) => setResizable(event.target.checked);\n\n  const handleCompactTypeChange = (event) => setCompactType(event.target.value);\n\n  return (\n    <div style={{ margin: \"0 10px\" }}>\n      <h1>React Drag and Drop Dashboard</h1>\n      <div>\n        <p>\n          Draggable:{\" \"}\n          <Switch\n            checked={draggable}\n            onChange={handleDraggableChange}\n            color=\"primary\"\n            name=\"checkedDrag\"\n            inputProps={{ \"aria-label\": \"primary checkbox\" }}\n          />\n        </p>\n        <p>\n          Resizable:{\" \"}\n          <Switch\n            checked={resizable}\n            onChange={handleResizableChange}\n            color=\"primary\"\n            name=\"checkedResize\"\n            inputProps={{ \"aria-label\": \"primary checkbox\" }}\n          />\n        </p>\n        <p>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">Compact Type</FormLabel>\n            <RadioGroup\n              aria-label=\"gender\"\n              name=\"gender1\"\n              value={compactType}\n              onChange={handleCompactTypeChange}\n            >\n              <FormControlLabel\n                value=\"vertical\"\n                control={<Radio />}\n                label=\"Vertical\"\n              />\n              <FormControlLabel\n                value=\"horizontal\"\n                control={<Radio />}\n                label=\"Horizontal\"\n              />\n              <FormControlLabel\n                value=\"nocompaction\"\n                control={<Radio />}\n                label=\"No Compaction\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </p>\n      </div>\n      <Paper style={{ height: \"500px\" }}>\n        <ReactGridLayout\n          layout={layout}\n          cols={12}\n          rowHeight={30}\n          width={1200}\n          margin={[10, 10]}\n          containerPadding={[10, 10]}\n          className=\"layout\"\n          isDraggable={draggable}\n          isResizable={resizable}\n          resizeHandles={[\"se\"]}\n          resizeHandle={() => <AspectRatioIcon />}\n          compactType={compactType}\n          // onLayoutChange={() => console.log(\"layout has changed\")}\n        >\n          <Card className={classes.container} key=\"a\">\n            Card A\n          </Card>\n          <Card className={classes.container} key=\"b\">\n            Card B\n          </Card>\n          <Card className={classes.container} key=\"c\">\n            Card C\n          </Card>\n          <Card className={classes.container} key=\"d\">\n            Card D\n          </Card>\n          <Card className={classes.container} key=\"e\">\n            Card E\n          </Card>\n        </ReactGridLayout>\n      </Paper>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}